#define time iTime
#define OCTAVE 4
#define EPSILON 0.01
#define PI 3.1415926

// TODO: add anti-aliasing and lighting
vec4 colorLookup(in float x)
{
	const vec4 yellow = vec4(1., 1., 0., 1.);
    const vec4 red = vec4(1., 0., 0., 1.);
    const vec4 black = vec4(vec3(0.), 1.);
    const vec4 white = vec4(1.);
    const vec3 bound = vec3(0.06, 0.11, 0.15);
    x /= 5.;
    if (x < bound.z) {
        if (x < bound.x) {
            return mix(white, yellow, x * 1. / bound.x);
        }
        if (x < bound.y) {
            return mix(yellow, red, (x-bound.x) * 1./ (bound.y-bound.x));
        }
        return mix(red, black, (x-bound.y) / (bound.z-bound.y));
    } else {
        return black;
    }
}

float noise( in float x ){return texture(iChannel0, vec2(x*.01,1.)).x;}

float hash( float n ){return fract(sin(n)*43758.5453);}

//iq's ubiquitous 3d noise
float noise(in vec3 p)
{
	vec3 ip = floor(p);
    vec3 f = fract(p);
	f = f*f*(3.0-2.0*f);
	
	vec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + f.xy;
	vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;
	return mix(rg.x, rg.y, f.z);
}

float fractalNoise(in vec3 p)
{
    const float amplitudeFactor = 0.5;
  	const float frequencyFactor = 2.03;
  	float amplitude = 0.5;
    float noiseValue = 0.;
    for (int i = 0; i < OCTAVE; i++)
    {
        noiseValue += amplitude * noise(p / 30.);
        amplitude *= amplitudeFactor;
        p *= frequencyFactor;
    }
    return noiseValue;
}

float drawExplosion(in vec3 p, 
                    in float displacement, 
                    in vec3 spherePos,
                    in float radius, 
                    out float displacementOut)
{
    displacementOut = fractalNoise(p);
    
    // dist to sphere surface
    float dist = length(p - spherePos) - radius;
    dist += displacementOut * displacement;
    return dist;
}

bool sphereTracing(in vec3 origin, 
                   in float displacement, 
                   in vec3 spherePos,
                   in float radius, 
                   in vec3 dir,
                   inout vec3 hitPoint,
                   inout vec4 color)
{
    const int steps = 20;
    float dist = 0.;
    for (int i = 0; i < steps; i++)
    {
        vec3 p = origin + dist*dir;
        float displacementOut;
        float distToSurface = drawExplosion(p, displacement, spherePos, radius, displacementOut);
        if (distToSurface < EPSILON)
        {
            hitPoint = p;
            color = colorLookup(displacementOut);
        }
        dist += distToSurface;
    }
    return false;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
	vec2 uv = fragCoord.xy / iResolution.xy;
    uv = uv * 2. - 1.;
    uv.x *= iResolution.x / iResolution.y;
    fragColor = vec4(vec3(0.), 1.0);
    
    float t = mod(time, 3.) / 3.;
    t = t*t*(3.-2.*t);
    float displacement = t * 40.;
    vec3 spherePos = vec3(0, 0, 200.);
    
    vec3 hitPoint = vec3(0.);
    vec3 origin = vec3(0.);
    float radius = displacement * 3.;
    vec3 dir = normalize(vec3(uv, 1.0));
    sphereTracing(origin, displacement, spherePos, radius, dir, hitPoint, fragColor);
}